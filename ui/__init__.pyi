""" Stub file for python-cli-ui """

from typing import Any, Callable, List, Union

class Color:
   def __init__(self, code: int, modifier: int=None) -> None: ...
class UnicodeSequence:
    def __init__(self, color: Color, as_unicode: str, as_ascii: str) -> None: ...
class Symbol:
    def __init__(self, as_unicode: str, as_ascii: str) -> None: ...
class Timer:
    def __init__(self, description: str) -> None: ...

_ProgressMeasure = Union[float, int]
_DescFunction = Callable[[Any], str]

reset: Color
bold: Color
faint: Color
standout: Color
underline: Color
blink: Color
overline: Color

black: Color
darkred: Color
darkgreen: Color
brown: Color
darkblue: Color
purple: Color
teal: Color
lightgray: Color

darkgray: Color
red: Color
green: Color
yellow: Color
blue: Color
fuchsia: Color
turquoise: Color
white: Color

darkteal: Color
darkyellow: Color
fuscia: Color

check: UnicodeSequence
cross: UnicodeSequence
ellipsis: UnicodeSequence

def setup(*, verbose: bool=False, quiet: bool=False, color: str='auto', title: str='auto', timestamp: bool=False) -> None: ...
def info(*tokens: Any, sep: str=" " , end: str="\n", fileobj: Any=None, update_title: bool=False) -> None: ...
def info_section(*tokens: Any, sep: str=" " , end: str="\n", fileobj: Any=None, update_title: bool=False) -> None: ...
def info_1(*tokens: Any, sep: str=" " , end: str="\n", fileobj: Any=None, update_title: bool=False) -> None: ...
def info_2(*tokens: Any, sep: str=" " , end: str="\n", fileobj: Any=None, update_title: bool=False) -> None: ...
def info_3(*tokens: Any, sep: str=" " , end: str="\n", fileobj: Any=None, update_title: bool=False) -> None: ...
def debug(*tokens: Any, sep: str=" " , end: str="\n", fileobj: Any=None, update_title: bool=False) -> None: ...
def error(*tokens: Any, sep: str=" " , end: str="\n", fileobj: Any=None, update_title: bool=False) -> None: ...
def warning(*tokens: Any, sep: str=" " , end: str="\n", fileobj: Any=None, update_title: bool=False) -> None: ...
def fatal(*tokens: Any, sep: str=" " , end: str="\n", fileobj: Any=None, update_title: bool=False) -> None: ...
def dot(*, fileobj: Any=None, last: bool=False) -> None: ...
def info_count(i: int, n: int, *rest: Any, end: str="\n", fileobj: Any=None, update_title: bool=False) -> None: ...
def info_progress(prefix: str, value: ProgressMeasure, max_value: ProgressMeasure, fileobj: Any=None, update_title: bool=False) -> None: ...
def tabs(num: int): ...
def indent(text: str, num: int): ...
def info_table(data: List[List[Any]], headers: List[str]=None, fileobj: Any=None) -> None: ...
def read_input() -> None: ...
def ask_string(question: str, default: Any=None) -> None: ...
def ask_choice(input_text: str, choices: List[Any], *, func_desc: DescFunction) -> str: ...
def ask_yes_no(question: str, default: bool=False) -> bool: ...
def did_you_mean(message: str, user_input: str, choices: List[str]) -> None: ...
